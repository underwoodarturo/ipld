{"version":3,"sources":["components/header/ipfs-logo.svg","i18n.js","components/header/Header.js","components/update/UpdateAvailable.js","App.js","bundles/ipfs.js","bundles/routes.js","bundles/index.js","registerServiceWorker.js","webpack:///./src/index.js?b635"],"names":["module","exports","localeData","ca","cs","da","de","en","es","fr","it","ja","ko","nl","no","pl","pt","ru","sv","zh","i18n","use","ICU","StaticHttpBackend","LanguageDetector","init","ns","fallbackLng","default","debug","process","DEBUG","backend","loadPath","react","wait","bindI18n","bindStore","nsMode","useSuspense","withTranslation","t","className","href","title","src","ipfsLogo","alt","style","height","width","maxWidth","Trans","i18nKey","onClick","window","location","reload","App","props","state","showUpdateAvailable","registerServiceWorker","onUpdate","setState","this","doInitIpfs","Page","route","embed","queryObject","navHelper","doUpdateUrl","Component","connect","defaultState","apiOpts","host","port","protocol","provider","ipfsReady","name","reducer","type","payload","error","Object","assign","identity","apiOts","getExtraArgs","getIpfs","root","_ipfs","selectIpfsReady","ipfs","selectIpfsIdentity","a","dispatch","getState","console","log","time","getUserOpts","ipfsClient","info","id","timeEnd","ipfsOpts","Ipfs","initJsIpfs","message","includes","warn","url","URL","hash","replace","toString","key","userOpts","localStorage","optsStr","getItem","JSON","parse","opts","Promise","resolve","reject","once","err","createRouteBundle","ExplorePage","StartExploringPage","routeInfoSelector","composeBundles","exploreBundle","all","ipldDeps","map","mod","ipld","formats","ipldEthereum","pop","push","values","routesBundle","ipfsBundle","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","catch","ReactDOM","render","store","getStore","I18nextProvider","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","document","getElementById"],"mappings":"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","file":"static/js/main.0ec8c202.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ipfs-logo.4831bd1a.svg\";","import i18n from 'i18next'\nimport ICU from 'i18next-icu'\nimport StaticHttpBackend from 'i18next-http-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nimport ca from 'i18next-icu/locale-data/ca'\nimport cs from 'i18next-icu/locale-data/cs'\nimport da from 'i18next-icu/locale-data/da'\nimport de from 'i18next-icu/locale-data/de'\nimport en from 'i18next-icu/locale-data/en'\nimport es from 'i18next-icu/locale-data/es'\nimport fr from 'i18next-icu/locale-data/fr'\nimport it from 'i18next-icu/locale-data/it'\nimport ja from 'i18next-icu/locale-data/ja'\nimport ko from 'i18next-icu/locale-data/ko'\nimport nl from 'i18next-icu/locale-data/nl'\nimport no from 'i18next-icu/locale-data/no'\nimport pl from 'i18next-icu/locale-data/pl'\nimport pt from 'i18next-icu/locale-data/pt'\nimport ru from 'i18next-icu/locale-data/ru'\nimport sv from 'i18next-icu/locale-data/sv'\nimport zh from 'i18next-icu/locale-data/zh'\n\nconst localeData = [ca, cs, da, de, en, es, fr, it, ja, ko, nl, no, pl, pt, ru, sv, zh]\n\ni18n\n  .use(new ICU({ localeData }))\n  .use(StaticHttpBackend)\n  .use(LanguageDetector)\n  .init({\n    ns: ['explore'],\n    fallbackLng: {\n      'zh-Hans': ['zh-CN', 'en'],\n      'zh-Hant': ['zh-TW', 'en'],\n      zh: ['zh-CN', 'en'],\n      default: ['en']\n    },\n    debug: process.env.DEBUG,\n    backend: {\n      // ensure a realtive path is used to look up the locales, so it works when used from /ipfs/<cid>\n      loadPath: 'locales/{{lng}}/{{ns}}.json'\n    },\n    // react i18next special options (optional)\n    react: {\n      wait: true,\n      bindI18n: 'languageChanged loaded',\n      bindStore: 'added removed',\n      nsMode: 'default',\n      useSuspense: false\n    }\n  })\n\nexport default i18n\n","import React from 'react'\nimport ipfsLogo from './ipfs-logo.svg'\nimport { IpldExploreForm } from 'ipld-explorer-components'\nimport { withTranslation } from 'react-i18next'\n\nconst Header = ({ t }) => {\n  return (\n    <header className='flex-l items-center pa3 bg-navy bb bw3 border-aqua tc tl-l'>\n      <a href='#/' title={t('homeLink')} className='flex-none v-mid'>\n        <img src={ipfsLogo} alt='IPFS' style={{height: 50, width: 117.5}} />\n      </a>\n      <div className='flex-auto ph2 ph3-l pt1'>\n        <div style={{maxWidth: 560}} className='center-m'>\n          <IpldExploreForm />\n        </div>\n      </div>\n      <div className='pt2 pt0-l ma0 inline-flex items-center'>\n        <h1 className='f3 fw2 montserrat aqua ttu'>{ t('appName') }</h1>\n        {/* <div className='pl3'>\n          <a href='https://github.com/ipfs-shipyard/ipld-explorer' target='_blank' rel=\"noopener noreferrer\" aria-label='View source on GitHub'>\n            <svg xmlns='http://www.w3.org/2000/svg' height='24' viewBox='0 0 32.58 31.77'>\n              <path fill='#7f8491' d='M16.29 0a16.29 16.29 0 00-5.15 31.75c.82.15 1.11-.36 1.11-.79v-2.77C7.7 29.18 6.74 26 6.74 26a4.36 4.36 0 00-1.81-2.39c-1.47-1 .12-1 .12-1a3.43 3.43 0 012.49 1.68 3.48 3.48 0 004.74 1.36 3.46 3.46 0 011-2.18c-3.62-.41-7.42-1.81-7.42-8a6.3 6.3 0 011.67-4.37 5.94 5.94 0 01.16-4.31s1.37-.44 4.48 1.67a15.41 15.41 0 018.16 0c3.11-2.11 4.47-1.67 4.47-1.67a5.91 5.91 0 01.2 4.28 6.3 6.3 0 011.67 4.37c0 6.26-3.81 7.63-7.44 8a3.85 3.85 0 011.11 3v4.47c0 .53.29.94 1.12.78A16.29 16.29 0 0016.29 0z'/>\n            </svg>\n          </a>\n        </div> */}\n      </div>\n\n    </header>\n  )\n}\n\nexport default withTranslation('explore')(Header)\n","import React from 'react'\nimport { Trans, withTranslation } from 'react-i18next'\n\nconst UpdateAvailable = () => {\n  return (\n    <div className='fixed bottom-0 w-100 tc'>\n      <div className='dib f5 lh-copy avenir ph4 pv3 white bg-green br2 br--top'>\n        <Trans i18nKey='UpdateAvailable.paragraph1'>\n          A new version of IPLD Explorer is available,{' '}\n          <button\n            className='ma0 pa0 button-reset pointer underline link white fw5 bg-transparent bn'\n            onClick={() => window.location.reload()}\n          >\n            please reload\n          </button>\n        </Trans>\n      </div>\n    </div>\n  )\n}\n\nexport default withTranslation('explore')(UpdateAvailable)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'redux-bundler-react'\nimport navHelper from 'internal-nav-helper'\nimport Header from './components/header/Header'\nimport UpdateAvailable from './components/update/UpdateAvailable'\n\nexport class App extends Component {\n  static propTypes = {\n    doInitIpfs: PropTypes.func.isRequired,\n    doUpdateUrl: PropTypes.func.isRequired,\n    queryObject: PropTypes.object.isRequired,\n    registerServiceWorker: PropTypes.func,\n    route: PropTypes.oneOfType([PropTypes.func, PropTypes.element]).isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      showUpdateAvailable: false\n    }\n    if (props.registerServiceWorker) {\n      props.registerServiceWorker({\n        onUpdate: () => this.setState({ showUpdateAvailable: true })\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.props.doInitIpfs()\n  }\n\n  render() {\n    const { showUpdateAvailable } = this.state\n    const Page = this.props.route\n    const { embed } = this.props.queryObject\n    return (\n      <div className='sans-serif' onClick={navHelper(this.props.doUpdateUrl)}>\n        {embed ? null : <Header />}\n        <div className='ph4-l pt4-l'>\n          <Page embed={embed} />\n        </div>\n        {showUpdateAvailable ? <UpdateAvailable /> : null}\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  'selectRoute',\n  'selectQueryObject',\n  'doUpdateUrl',\n  'doInitIpfs',\n  App\n)\n","import root from 'window-or-global'\n\nconst defaultState = {\n  apiOpts: {\n    host: 'enterprise.api.trato.io',\n    port: '443',\n    protocol: 'https'\n  },\n  provider: 'js-ipfs', // 'window.ipfs' | 'js-ipfs-api' | 'js-ipfs'\n  ipfsReady: false\n}\n\nexport default {\n  name: 'ipfs',\n\n  reducer(state, { type, payload, error }) {\n    state = state || defaultState\n    if (type === 'IPFS_INIT_FINISHED') {\n      return Object.assign({}, state, {\n        ipfsReady: true,\n        identity: payload.identity,\n        provider: payload.provider,\n        apiOts: payload.apiOpts || state.apiOpts\n      })\n    }\n\n    if (type === 'IPFS_INIT_FAILED') {\n      return Object.assign({}, state, { ipfsReady: false, error: error })\n    }\n\n    return state\n  },\n\n  getExtraArgs() {\n    return { getIpfs: () => root._ipfs }\n  },\n\n  selectIpfsReady: state => state.ipfs.ipfsReady,\n\n  selectIpfsIdentity: state => state.ipfs.identity,\n\n  doInitIpfs: () => async ({ dispatch, getState }) => {\n    console.log('Looking for IPFS')\n    console.time('IPFS_INIT')\n    dispatch({ type: 'IPFS_INIT_STARTED' })\n\n    let ipfs = null\n    let identity = null\n\n    // TRY window.ipfs!\n    if (root.ipfs) {\n      // no-op for now\n      // TODO: after switch to latest js-ipfs (with async iterators) use https://github.com/ipfs-shipyard/ipfs-provider\n    }\n\n    // TRY js-ipfs-api!\n    const apiOpts = Object.assign(\n      {},\n      getState().ipfs.apiOpts,\n      getUserOpts('ipfsApi')\n    )\n    try {\n      console.time('IPFS_INIT_API')\n      const { default: ipfsClient } = await import('ipfs-http-client')\n      console.log('Trying ipfs-http-client', apiOpts)\n      console.info(\n        \"🎛️ Customise your js-ipfs-api opts by setting an `ipfsApi` value in localStorage. e.g. localStorage.setItem('ipfsApi', JSON.stringify({port: '1337'}))\"\n      )\n      ipfs = ipfsClient(apiOpts)\n      identity = await ipfs.id()\n      console.log('js-ipfs-api ready!')\n      root._ipfs = ipfs\n      console.timeEnd('IPFS_INIT_API')\n      console.timeEnd('IPFS_INIT')\n      return dispatch({\n        type: 'IPFS_INIT_FINISHED',\n        payload: {\n          identity,\n          provider: 'js-ipfs-api',\n          apiOpts\n        }\n      })\n    } catch (error) {\n      console.log('No ipfs-api found', error)\n    }\n\n    const ipfsOpts = getUserOpts('ipfsOpts')\n    // TRY js-ipfs!\n    try {\n      console.time('IPFS_INIT_JS_IPFS')\n      console.log('Trying js-ipfs', ipfsOpts)\n      console.info(\n        \"🎛️ Customise your js-ipfs opts by setting an `ipfsOpts` value in localStorage. e.g. localStorage.setItem('ipfsOpts', JSON.stringify({relay: {enabled: true}}))\"\n      )\n      const { default: Ipfs } = await import('ipfs')\n      console.log('got Ipfs')\n      const ipfs = await initJsIpfs(Ipfs, ipfsOpts)\n      console.log('got ipfs')\n      identity = await ipfs.id()\n      console.log('js-ipfs ready!')\n      root._ipfs = ipfs\n      console.timeEnd('IPFS_INIT_JS_IPFS')\n      console.timeEnd('IPFS_INIT')\n      return dispatch({\n        type: 'IPFS_INIT_FINISHED',\n        payload: {\n          identity,\n          provider: 'js-ipfs'\n        }\n      })\n    } catch (error) {\n      if (error.message && error.message.includes('subtle is undefined')) {\n        console.warn('IPLD Explorer requires access to window.crypto, redirecting to canonical URL that is known to provide it in all browsers')\n        // This error means js-ipfs was loaded in a context that is not marked\n        // as Secure Context by the browser vendor.  (example: *.localhost in\n        // Firefox until https://bugzilla.mozilla.org/show_bug.cgi?id=1220810\n        // is addresssed)\n        // This is difficult to debug for regular user, as Explorer simply fails to load anything from IPFS.\n        // For now, we detect this failure and redirect to canonical version with TLS, so it always works.\n        const url = new URL('https://explore.ipld.io/?x-ipfs-companion-no-redirect')\n        url.hash = window.location.hash\n        window.location.replace(url.toString())\n        return\n      }\n      console.log('Failed to initialise js-ipfs', error)\n      console.timeEnd('IPFS_INIT')\n      return dispatch({ type: 'IPFS_INIT_FAILED', error })\n    }\n  }\n}\n\nfunction getUserOpts(key) {\n  let userOpts = {}\n  if (root.localStorage) {\n    try {\n      const optsStr = root.localStorage.getItem(key) || '{}'\n      userOpts = JSON.parse(optsStr)\n    } catch (error) {\n      console.log(`Error reading '${key}' value from localStorage`, error)\n    }\n  }\n  return userOpts\n}\n\nfunction initJsIpfs(Ipfs, opts) {\n  return new Promise((resolve, reject) => {\n    const ipfs = new Ipfs(opts)\n    ipfs.once('ready', () => resolve(ipfs))\n    ipfs.once('error', err => reject(err))\n  })\n}\n","import { createRouteBundle } from 'redux-bundler'\nimport { ExplorePage, StartExploringPage } from 'ipld-explorer-components'\n\nexport default createRouteBundle({\n  '/explore*': ExplorePage,\n  '/': StartExploringPage,\n  '': StartExploringPage\n}, { routeInfoSelector: 'selectHash' })\n","import { composeBundles } from 'redux-bundler'\nimport { exploreBundle } from 'ipld-explorer-components'\nimport ipfsBundle from './ipfs'\nimport routesBundle from './routes'\n\nexport default composeBundles(\n  exploreBundle(async () => {\n    const ipldDeps = await Promise.all([\n      import(/* webpackChunkName: \"ipld\" */ 'ipld'),\n      import(/* webpackChunkName: \"ipld\" */ 'ipld-bitcoin'),\n      import(/* webpackChunkName: \"ipld\" */ 'ipld-dag-cbor'),\n      import(/* webpackChunkName: \"ipld\" */ 'ipld-dag-pb'),\n      import(/* webpackChunkName: \"ipld\" */ 'ipld-git'),\n      import(/* webpackChunkName: \"ipld\" */ 'ipld-raw'),\n      import(/* webpackChunkName: \"ipld\" */ 'ipld-zcash'),\n      import(/* webpackChunkName: \"ipld\" */ 'ipld-ethereum')\n    ])\n\n    // CommonJs exports object is .default when imported ESM style\n    const [ipld, ...formats] = ipldDeps.map(mod => mod.default)\n    // ipldEthereum is an Object, each key points to a ipld format impl\n    const ipldEthereum = formats.pop()\n    formats.push(...Object.values(ipldEthereum))\n    return {\n      ipld,\n      formats\n    }\n  }),\n  routesBundle,\n  ipfsBundle\n)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available please refresh.\" message in your web app.\n              console.log('A new version of IPLD Explorer is available, please reload the page.')\n\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('IPLD Explorer is cached for offline use.')\n\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import 'tachyons'\nimport 'ipfs-css'\nimport 'react-virtualized/styles.css'\nimport 'ipld-explorer-components/dist/components/object-info/LinksTable.css'\nimport 'ipld-explorer-components/dist/components/loader/Loader.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider as ReduxStoreProvider } from 'redux-bundler-react'\nimport { I18nextProvider } from 'react-i18next'\nimport i18n from './i18n'\nimport App from './App'\nimport getStore from './bundles'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst appVersion = process.env.REACT_APP_VERSION\n\nconsole.log(`IPLD Explorer - v${appVersion} - https://github.com/ipfs-shipyard/ipld-explorer`)\n\nReactDOM.render(\n  <ReduxStoreProvider store={getStore()}>\n    <I18nextProvider i18n={i18n}>\n      <App registerServiceWorker={registerServiceWorker} />\n    </I18nextProvider>\n  </ReduxStoreProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}